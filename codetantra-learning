1)
The setbase() manipulator sets the basefield as one of the possible values hex, oct or dec.

The setbase() manipulator is used to define the base of the numeral value of a variable.

The prototype of setbase() manipulator is defined in the iomanip header file and it should be include in user program.

The common base converters are:

dec - decimal base (base - 10)
oct - octal base (base - 8)
hex - hexadecimal base (base - 16)

The format of setbase() is

setbase(base);

Let us consider an example:

cout << setbase(16) << 15 << endl; // it prints f


2) setprecision()

Setprecision when used along with ‘fixed’ provides precision to floating-point numbers correct to decimal numbers mentioned in the brackets of the setprecison. 
It is defined in header file <iomanip>.

3) The ws() manipulator is used to ignore the leading white space characters that precedes the given input.

4)The setiosflags() manipulator sets the format flags specified by parameter.

The format of setiosflags() is:

setiosflags(ios_base::fmtflags mask); // mask is the parameter which represents different format flags

5)In C++ user can define and use manipulator similar to built in manipulators as per the user's used and desire to control the format of input and output.

Similar to the predefined built manipulators use can define non-parameterized as well as parameterized manipulators.

The syntax for designing manipulator is:

ostream & manipulator_name(ostream &ostrObj) {
	set of statements;
	return ostrObj;
}

Here manipulator_name is the user defined manipulator name, it will receive and returns the ostream object.

Let us consider an example:

#include <iostream>

#include <iomanip>

using  namespace std;
ostream & tab(ostream &osObj) { // Defining user defined manipulator tab
	osObj << "\t";
	return osObj;
}
int main() {
	cout << "Code" << tab <<"Tantra" << tab <<"Software" << endl; // Call is made to the manipulator tab
}

The above code prints the output as Code Tantra Software.



6) During assignment comma operator has the least precedence.


7) scope resolution operator (::) is used to access a global variable when there is a local variable with same name.
In other words, scope resolution operator (::) is used to access a global variable when there is a local variable with same name.

A global variable is a variable which is declared outside of all functions and which may be accessed by all the functions.

The syntax for using a scope resolution operator (::) is:

::Variable_name

Below is an example demonstrating the usage of a scope resolution operator:

int a = 10;
int main() {
	int a = 20;
	cout << "Local variable value = " << a; // statement-1  // will get 20
	cout << "Global variable value = " << ::a; // statement-2 // will get 10 global variable value.
}

#  Global Variables

As the name suggests, Global Variables can be accessed from any part of the program.

    They are available through out the life time of a program.
    They are declared at the top of the program outside all of the functions or blocks.
    Declaring global variables: Global variables are usually declared outside of all of the functions and blocks, at the top of the program. They can be     accessed from any portion of the program.
    
# Local Variables

Variables defined within a function or block are said to be local to those functions.  

    Anything between ‘{‘ and ‘}’ is said to inside a block.
    Local variables do not exist outside the block in which they are declared, i.e. they can not be accessed or used outside that block.
    Declaring local variables: Local variables are declared inside a block.
    
    
 
 #    Usually when two variable with same name are defined then the compiler produces a compile time error. But if the variables are defined in different scopes then the compiler allows it.
 
# Whenever there is a local variable defined with same name as that of a global variable then the compiler will give precedence to the local variable

gfg links[https://www.geeksforgeeks.org/scope-of-variables-in-c/] related to scope of variable in cpp.





    
    
    

